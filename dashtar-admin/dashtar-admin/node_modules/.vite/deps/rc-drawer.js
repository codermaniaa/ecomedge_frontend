import {
  KeyCode_default,
  _createSuper,
  _toConsumableArray,
  canUseDom,
  omit,
  raf_default,
  require_classnames
} from "./chunk-SMWIIT5U.js";
import {
  _objectWithoutProperties
} from "./chunk-VSANAYI5.js";
import {
  _inherits
} from "./chunk-T4TWG6A4.js";
import {
  _extends
} from "./chunk-MA5IEF3P.js";
import "./chunk-QGMN46QZ.js";
import {
  _assertThisInitialized
} from "./chunk-NIGMAIX6.js";
import "./chunk-V7XVH3XH.js";
import "./chunk-ZGD3IAN7.js";
import {
  _objectSpread2
} from "./chunk-H7HO4LSL.js";
import {
  _defineProperty
} from "./chunk-7AOOOGVU.js";
import {
  _classCallCheck
} from "./chunk-ZDGZLXMQ.js";
import {
  _createClass
} from "./chunk-AH55BGU5.js";
import {
  _typeof
} from "./chunk-7PPPXLKB.js";
import {
  require_react_dom
} from "./chunk-YEJDQZ6O.js";
import {
  require_react
} from "./chunk-2R4MC5UL.js";
import {
  __toESM
} from "./chunk-USJHI7ER.js";

// ../../node_modules/rc-util/es/PortalWrapper.js
var React = __toESM(require_react());

// ../../node_modules/rc-util/es/Portal.js
var import_react = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var Portal = (0, import_react.forwardRef)(function(props, ref) {
  var didUpdate = props.didUpdate, getContainer = props.getContainer, children = props.children;
  var parentRef = (0, import_react.useRef)();
  var containerRef = (0, import_react.useRef)();
  (0, import_react.useImperativeHandle)(ref, function() {
    return {};
  });
  var initRef = (0, import_react.useRef)(false);
  if (!initRef.current && canUseDom()) {
    containerRef.current = getContainer();
    parentRef.current = containerRef.current.parentNode;
    initRef.current = true;
  }
  (0, import_react.useEffect)(function() {
    didUpdate === null || didUpdate === void 0 ? void 0 : didUpdate(props);
  });
  (0, import_react.useEffect)(function() {
    if (containerRef.current.parentNode === null && parentRef.current !== null) {
      parentRef.current.appendChild(containerRef.current);
    }
    return function() {
      var _containerRef$current, _containerRef$current2;
      (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : (_containerRef$current2 = _containerRef$current.parentNode) === null || _containerRef$current2 === void 0 ? void 0 : _containerRef$current2.removeChild(containerRef.current);
    };
  }, []);
  return containerRef.current ? import_react_dom.default.createPortal(children, containerRef.current) : null;
});
var Portal_default = Portal;

// ../../node_modules/rc-util/es/getScrollBarSize.js
var cached;
function getScrollBarSize(fresh) {
  if (typeof document === "undefined") {
    return 0;
  }
  if (fresh || cached === void 0) {
    var inner = document.createElement("div");
    inner.style.width = "100%";
    inner.style.height = "200px";
    var outer = document.createElement("div");
    var outerStyle = outer.style;
    outerStyle.position = "absolute";
    outerStyle.top = "0";
    outerStyle.left = "0";
    outerStyle.pointerEvents = "none";
    outerStyle.visibility = "hidden";
    outerStyle.width = "200px";
    outerStyle.height = "150px";
    outerStyle.overflow = "hidden";
    outer.appendChild(inner);
    document.body.appendChild(outer);
    var widthContained = inner.offsetWidth;
    outer.style.overflow = "scroll";
    var widthScroll = inner.offsetWidth;
    if (widthContained === widthScroll) {
      widthScroll = outer.clientWidth;
    }
    document.body.removeChild(outer);
    cached = widthContained - widthScroll;
  }
  return cached;
}

// ../../node_modules/rc-util/es/setStyle.js
function setStyle(style) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  if (!style) {
    return {};
  }
  var _options$element = options.element, element = _options$element === void 0 ? document.body : _options$element;
  var oldStyle = {};
  var styleKeys = Object.keys(style);
  styleKeys.forEach(function(key) {
    oldStyle[key] = element.style[key];
  });
  styleKeys.forEach(function(key) {
    element.style[key] = style[key];
  });
  return oldStyle;
}
var setStyle_default = setStyle;

// ../../node_modules/rc-util/es/switchScrollingEffect.js
function isBodyOverflowing() {
  return document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight) && window.innerWidth > document.body.offsetWidth;
}
var cacheStyle = {};
var switchScrollingEffect_default = function(close) {
  if (!isBodyOverflowing() && !close) {
    return;
  }
  var scrollingEffectClassName2 = "ant-scrolling-effect";
  var scrollingEffectClassNameReg2 = new RegExp("".concat(scrollingEffectClassName2), "g");
  var bodyClassName = document.body.className;
  if (close) {
    if (!scrollingEffectClassNameReg2.test(bodyClassName))
      return;
    setStyle_default(cacheStyle);
    cacheStyle = {};
    document.body.className = bodyClassName.replace(scrollingEffectClassNameReg2, "").trim();
    return;
  }
  var scrollBarSize = getScrollBarSize();
  if (scrollBarSize) {
    cacheStyle = setStyle_default({
      position: "relative",
      width: "calc(100% - ".concat(scrollBarSize, "px)")
    });
    if (!scrollingEffectClassNameReg2.test(bodyClassName)) {
      var addClassName = "".concat(bodyClassName, " ").concat(scrollingEffectClassName2);
      document.body.className = addClassName.trim();
    }
  }
};

// ../../node_modules/rc-util/es/Dom/scrollLocker.js
var uuid = 0;
var locks = [];
var scrollingEffectClassName = "ant-scrolling-effect";
var scrollingEffectClassNameReg = new RegExp("".concat(scrollingEffectClassName), "g");
var cacheStyle2 = /* @__PURE__ */ new Map();
var ScrollLocker = _createClass(function ScrollLocker2(_options) {
  var _this = this;
  _classCallCheck(this, ScrollLocker2);
  _defineProperty(this, "lockTarget", void 0);
  _defineProperty(this, "options", void 0);
  _defineProperty(this, "getContainer", function() {
    var _this$options;
    return (_this$options = _this.options) === null || _this$options === void 0 ? void 0 : _this$options.container;
  });
  _defineProperty(this, "reLock", function(options) {
    var findLock = locks.find(function(_ref) {
      var target = _ref.target;
      return target === _this.lockTarget;
    });
    if (findLock) {
      _this.unLock();
    }
    _this.options = options;
    if (findLock) {
      findLock.options = options;
      _this.lock();
    }
  });
  _defineProperty(this, "lock", function() {
    var _this$options3;
    if (locks.some(function(_ref2) {
      var target = _ref2.target;
      return target === _this.lockTarget;
    })) {
      return;
    }
    if (locks.some(function(_ref3) {
      var _this$options2;
      var options = _ref3.options;
      return (options === null || options === void 0 ? void 0 : options.container) === ((_this$options2 = _this.options) === null || _this$options2 === void 0 ? void 0 : _this$options2.container);
    })) {
      locks = [].concat(_toConsumableArray(locks), [{
        target: _this.lockTarget,
        options: _this.options
      }]);
      return;
    }
    var scrollBarSize = 0;
    var container = ((_this$options3 = _this.options) === null || _this$options3 === void 0 ? void 0 : _this$options3.container) || document.body;
    if (container === document.body && window.innerWidth - document.documentElement.clientWidth > 0 || container.scrollHeight > container.clientHeight) {
      if (getComputedStyle(container).overflow !== "hidden") {
        scrollBarSize = getScrollBarSize();
      }
    }
    var containerClassName = container.className;
    if (locks.filter(function(_ref4) {
      var _this$options4;
      var options = _ref4.options;
      return (options === null || options === void 0 ? void 0 : options.container) === ((_this$options4 = _this.options) === null || _this$options4 === void 0 ? void 0 : _this$options4.container);
    }).length === 0) {
      cacheStyle2.set(container, setStyle_default({
        width: scrollBarSize !== 0 ? "calc(100% - ".concat(scrollBarSize, "px)") : void 0,
        overflow: "hidden",
        overflowX: "hidden",
        overflowY: "hidden"
      }, {
        element: container
      }));
    }
    if (!scrollingEffectClassNameReg.test(containerClassName)) {
      var addClassName = "".concat(containerClassName, " ").concat(scrollingEffectClassName);
      container.className = addClassName.trim();
    }
    locks = [].concat(_toConsumableArray(locks), [{
      target: _this.lockTarget,
      options: _this.options
    }]);
  });
  _defineProperty(this, "unLock", function() {
    var _this$options5;
    var findLock = locks.find(function(_ref5) {
      var target = _ref5.target;
      return target === _this.lockTarget;
    });
    locks = locks.filter(function(_ref6) {
      var target = _ref6.target;
      return target !== _this.lockTarget;
    });
    if (!findLock || locks.some(function(_ref7) {
      var _findLock$options;
      var options = _ref7.options;
      return (options === null || options === void 0 ? void 0 : options.container) === ((_findLock$options = findLock.options) === null || _findLock$options === void 0 ? void 0 : _findLock$options.container);
    })) {
      return;
    }
    var container = ((_this$options5 = _this.options) === null || _this$options5 === void 0 ? void 0 : _this$options5.container) || document.body;
    var containerClassName = container.className;
    if (!scrollingEffectClassNameReg.test(containerClassName))
      return;
    setStyle_default(cacheStyle2.get(container), {
      element: container
    });
    cacheStyle2.delete(container);
    container.className = container.className.replace(scrollingEffectClassNameReg, "").trim();
  });
  this.lockTarget = uuid++;
  this.options = _options;
});

// ../../node_modules/rc-util/es/PortalWrapper.js
var openCount = 0;
var supportDom = canUseDom();
var cacheOverflow = {};
var getParent = function getParent2(getContainer) {
  if (!supportDom) {
    return null;
  }
  if (getContainer) {
    if (typeof getContainer === "string") {
      return document.querySelectorAll(getContainer)[0];
    }
    if (typeof getContainer === "function") {
      return getContainer();
    }
    if (_typeof(getContainer) === "object" && getContainer instanceof window.HTMLElement) {
      return getContainer;
    }
  }
  return document.body;
};
var PortalWrapper = function(_React$Component) {
  _inherits(PortalWrapper2, _React$Component);
  var _super = _createSuper(PortalWrapper2);
  function PortalWrapper2(props) {
    var _this;
    _classCallCheck(this, PortalWrapper2);
    _this = _super.call(this, props);
    _defineProperty(_assertThisInitialized(_this), "container", void 0);
    _defineProperty(_assertThisInitialized(_this), "componentRef", React.createRef());
    _defineProperty(_assertThisInitialized(_this), "rafId", void 0);
    _defineProperty(_assertThisInitialized(_this), "scrollLocker", void 0);
    _defineProperty(_assertThisInitialized(_this), "renderComponent", void 0);
    _defineProperty(_assertThisInitialized(_this), "updateScrollLocker", function(prevProps) {
      var _ref = prevProps || {}, prevVisible = _ref.visible;
      var _this$props = _this.props, getContainer = _this$props.getContainer, visible = _this$props.visible;
      if (visible && visible !== prevVisible && supportDom && getParent(getContainer) !== _this.scrollLocker.getContainer()) {
        _this.scrollLocker.reLock({
          container: getParent(getContainer)
        });
      }
    });
    _defineProperty(_assertThisInitialized(_this), "updateOpenCount", function(prevProps) {
      var _ref2 = prevProps || {}, prevVisible = _ref2.visible, prevGetContainer = _ref2.getContainer;
      var _this$props2 = _this.props, visible = _this$props2.visible, getContainer = _this$props2.getContainer;
      if (visible !== prevVisible && supportDom && getParent(getContainer) === document.body) {
        if (visible && !prevVisible) {
          openCount += 1;
        } else if (prevProps) {
          openCount -= 1;
        }
      }
      var getContainerIsFunc = typeof getContainer === "function" && typeof prevGetContainer === "function";
      if (getContainerIsFunc ? getContainer.toString() !== prevGetContainer.toString() : getContainer !== prevGetContainer) {
        _this.removeCurrentContainer();
      }
    });
    _defineProperty(_assertThisInitialized(_this), "attachToParent", function() {
      var force = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      if (force || _this.container && !_this.container.parentNode) {
        var parent = getParent(_this.props.getContainer);
        if (parent) {
          parent.appendChild(_this.container);
          return true;
        }
        return false;
      }
      return true;
    });
    _defineProperty(_assertThisInitialized(_this), "getContainer", function() {
      if (!supportDom) {
        return null;
      }
      if (!_this.container) {
        _this.container = document.createElement("div");
        _this.attachToParent(true);
      }
      _this.setWrapperClassName();
      return _this.container;
    });
    _defineProperty(_assertThisInitialized(_this), "setWrapperClassName", function() {
      var wrapperClassName = _this.props.wrapperClassName;
      if (_this.container && wrapperClassName && wrapperClassName !== _this.container.className) {
        _this.container.className = wrapperClassName;
      }
    });
    _defineProperty(_assertThisInitialized(_this), "removeCurrentContainer", function() {
      var _this$container, _this$container$paren;
      (_this$container = _this.container) === null || _this$container === void 0 ? void 0 : (_this$container$paren = _this$container.parentNode) === null || _this$container$paren === void 0 ? void 0 : _this$container$paren.removeChild(_this.container);
    });
    _defineProperty(_assertThisInitialized(_this), "switchScrollingEffect", function() {
      if (openCount === 1 && !Object.keys(cacheOverflow).length) {
        switchScrollingEffect_default();
        cacheOverflow = setStyle_default({
          overflow: "hidden",
          overflowX: "hidden",
          overflowY: "hidden"
        });
      } else if (!openCount) {
        setStyle_default(cacheOverflow);
        cacheOverflow = {};
        switchScrollingEffect_default(true);
      }
    });
    _this.scrollLocker = new ScrollLocker({
      container: getParent(props.getContainer)
    });
    return _this;
  }
  _createClass(PortalWrapper2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;
      this.updateOpenCount();
      if (!this.attachToParent()) {
        this.rafId = raf_default(function() {
          _this2.forceUpdate();
        });
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      this.updateOpenCount(prevProps);
      this.updateScrollLocker(prevProps);
      this.setWrapperClassName();
      this.attachToParent();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this$props3 = this.props, visible = _this$props3.visible, getContainer = _this$props3.getContainer;
      if (supportDom && getParent(getContainer) === document.body) {
        openCount = visible && openCount ? openCount - 1 : openCount;
      }
      this.removeCurrentContainer();
      raf_default.cancel(this.rafId);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props, children = _this$props4.children, forceRender = _this$props4.forceRender, visible = _this$props4.visible;
      var portal = null;
      var childProps = {
        getOpenCount: function getOpenCount() {
          return openCount;
        },
        getContainer: this.getContainer,
        switchScrollingEffect: this.switchScrollingEffect,
        scrollLocker: this.scrollLocker
      };
      if (forceRender || visible || this.componentRef.current) {
        portal = React.createElement(Portal_default, {
          getContainer: this.getContainer,
          ref: this.componentRef
        }, children(childProps));
      }
      return portal;
    }
  }]);
  return PortalWrapper2;
}(React.Component);
var PortalWrapper_default = PortalWrapper;

// ../../node_modules/rc-drawer/es/DrawerWrapper.js
var React3 = __toESM(require_react());

// ../../node_modules/rc-drawer/es/DrawerChild.js
var React2 = __toESM(require_react());
var import_classnames = __toESM(require_classnames());

// ../../node_modules/rc-drawer/es/utils.js
function dataToArray(vars) {
  if (Array.isArray(vars)) {
    return vars;
  }
  return [vars];
}
var transitionEndObject = {
  transition: "transitionend",
  WebkitTransition: "webkitTransitionEnd",
  MozTransition: "transitionend",
  OTransition: "oTransitionEnd otransitionend"
};
var transitionStr = Object.keys(transitionEndObject).filter(function(key) {
  if (typeof document === "undefined") {
    return false;
  }
  var html = document.getElementsByTagName("html")[0];
  return key in (html ? html.style : {});
})[0];
var transitionEnd = transitionEndObject[transitionStr];
function addEventListener(target, eventType, callback, options) {
  if (target.addEventListener) {
    target.addEventListener(eventType, callback, options);
  } else if (target.attachEvent) {
    target.attachEvent("on".concat(eventType), callback);
  }
}
function removeEventListener(target, eventType, callback, options) {
  if (target.removeEventListener) {
    target.removeEventListener(eventType, callback, options);
  } else if (target.attachEvent) {
    target.detachEvent("on".concat(eventType), callback);
  }
}
function transformArguments(arg, cb) {
  var result = typeof arg === "function" ? arg(cb) : arg;
  if (Array.isArray(result)) {
    if (result.length === 2) {
      return result;
    }
    return [result[0], result[1]];
  }
  return [result];
}
var isNumeric = function isNumeric2(value) {
  return !isNaN(parseFloat(value)) && isFinite(value);
};
var windowIsUndefined = !(typeof window !== "undefined" && window.document && window.document.createElement);
var getTouchParentScroll = function getTouchParentScroll2(root, currentTarget, differX, differY) {
  if (!currentTarget || currentTarget === document || currentTarget instanceof Document) {
    return false;
  }
  if (currentTarget === root.parentNode) {
    return true;
  }
  var isY = Math.max(Math.abs(differX), Math.abs(differY)) === Math.abs(differY);
  var isX = Math.max(Math.abs(differX), Math.abs(differY)) === Math.abs(differX);
  var scrollY = currentTarget.scrollHeight - currentTarget.clientHeight;
  var scrollX = currentTarget.scrollWidth - currentTarget.clientWidth;
  var style = document.defaultView.getComputedStyle(currentTarget);
  var overflowY = style.overflowY === "auto" || style.overflowY === "scroll";
  var overflowX = style.overflowX === "auto" || style.overflowX === "scroll";
  var y = scrollY && overflowY;
  var x = scrollX && overflowX;
  if (isY && (!y || y && (currentTarget.scrollTop >= scrollY && differY < 0 || currentTarget.scrollTop <= 0 && differY > 0)) || isX && (!x || x && (currentTarget.scrollLeft >= scrollX && differX < 0 || currentTarget.scrollLeft <= 0 && differX > 0))) {
    return getTouchParentScroll2(root, currentTarget.parentNode, differX, differY);
  }
  return false;
};

// ../../node_modules/rc-drawer/es/DrawerChild.js
var _excluded = ["className", "children", "style", "width", "height", "defaultOpen", "open", "prefixCls", "placement", "level", "levelMove", "ease", "duration", "getContainer", "handler", "onChange", "afterVisibleChange", "showMask", "maskClosable", "maskStyle", "onClose", "onHandleClick", "keyboard", "getOpenCount", "scrollLocker", "contentWrapperStyle"];
var currentDrawer = {};
var DrawerChild = function(_React$Component) {
  _inherits(DrawerChild2, _React$Component);
  var _super = _createSuper(DrawerChild2);
  function DrawerChild2(props) {
    var _this;
    _classCallCheck(this, DrawerChild2);
    _this = _super.call(this, props);
    _this.levelDom = void 0;
    _this.dom = void 0;
    _this.contentWrapper = void 0;
    _this.contentDom = void 0;
    _this.maskDom = void 0;
    _this.handlerDom = void 0;
    _this.drawerId = void 0;
    _this.timeout = void 0;
    _this.passive = void 0;
    _this.startPos = void 0;
    _this.domFocus = function() {
      if (_this.dom) {
        _this.dom.focus();
      }
    };
    _this.removeStartHandler = function(e) {
      if (e.touches.length > 1) {
        _this.startPos = null;
        return;
      }
      _this.startPos = {
        x: e.touches[0].clientX,
        y: e.touches[0].clientY
      };
    };
    _this.removeMoveHandler = function(e) {
      if (e.changedTouches.length > 1 || !_this.startPos) {
        return;
      }
      var currentTarget = e.currentTarget;
      var differX = e.changedTouches[0].clientX - _this.startPos.x;
      var differY = e.changedTouches[0].clientY - _this.startPos.y;
      if ((currentTarget === _this.maskDom || currentTarget === _this.handlerDom || currentTarget === _this.contentDom && getTouchParentScroll(currentTarget, e.target, differX, differY)) && e.cancelable) {
        e.preventDefault();
      }
    };
    _this.transitionEnd = function(e) {
      var dom = e.target;
      removeEventListener(dom, transitionEnd, _this.transitionEnd);
      dom.style.transition = "";
    };
    _this.onKeyDown = function(e) {
      if (e.keyCode === KeyCode_default.ESC) {
        var onClose = _this.props.onClose;
        e.stopPropagation();
        if (onClose) {
          onClose(e);
        }
      }
    };
    _this.onWrapperTransitionEnd = function(e) {
      var _this$props = _this.props, open = _this$props.open, afterVisibleChange2 = _this$props.afterVisibleChange;
      if (e.target === _this.contentWrapper && e.propertyName.match(/transform$/)) {
        _this.dom.style.transition = "";
        if (!open && _this.getCurrentDrawerSome()) {
          document.body.style.overflowX = "";
          if (_this.maskDom) {
            _this.maskDom.style.left = "";
            _this.maskDom.style.width = "";
          }
        }
        if (afterVisibleChange2) {
          afterVisibleChange2(!!open);
        }
      }
    };
    _this.openLevelTransition = function() {
      var _this$props2 = _this.props, open = _this$props2.open, width = _this$props2.width, height = _this$props2.height;
      var _this$getHorizontalBo = _this.getHorizontalBoolAndPlacementName(), isHorizontal = _this$getHorizontalBo.isHorizontal, placementName = _this$getHorizontalBo.placementName;
      var contentValue = _this.contentDom ? _this.contentDom.getBoundingClientRect()[isHorizontal ? "width" : "height"] : 0;
      var value = (isHorizontal ? width : height) || contentValue;
      _this.setLevelAndScrolling(open, placementName, value);
    };
    _this.setLevelTransform = function(open, placementName, value, right) {
      var _this$props3 = _this.props, placement = _this$props3.placement, levelMove = _this$props3.levelMove, duration = _this$props3.duration, ease = _this$props3.ease, showMask = _this$props3.showMask;
      _this.levelDom.forEach(function(dom) {
        dom.style.transition = "transform ".concat(duration, " ").concat(ease);
        addEventListener(dom, transitionEnd, _this.transitionEnd);
        var levelValue = open ? value : 0;
        if (levelMove) {
          var $levelMove = transformArguments(levelMove, {
            target: dom,
            open
          });
          levelValue = open ? $levelMove[0] : $levelMove[1] || 0;
        }
        var $value = typeof levelValue === "number" ? "".concat(levelValue, "px") : levelValue;
        var placementPos = placement === "left" || placement === "top" ? $value : "-".concat($value);
        placementPos = showMask && placement === "right" && right ? "calc(".concat(placementPos, " + ").concat(right, "px)") : placementPos;
        dom.style.transform = levelValue ? "".concat(placementName, "(").concat(placementPos, ")") : "";
      });
    };
    _this.setLevelAndScrolling = function(open, placementName, value) {
      var onChange2 = _this.props.onChange;
      if (!windowIsUndefined) {
        var right = document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight) && window.innerWidth > document.body.offsetWidth ? getScrollBarSize(true) : 0;
        _this.setLevelTransform(open, placementName, value, right);
        _this.toggleScrollingToDrawerAndBody(right);
      }
      if (onChange2) {
        onChange2(open);
      }
    };
    _this.toggleScrollingToDrawerAndBody = function(right) {
      var _this$props4 = _this.props, getContainer = _this$props4.getContainer, showMask = _this$props4.showMask, open = _this$props4.open;
      var container = getContainer && getContainer();
      if (container && container.parentNode === document.body && showMask) {
        var eventArray = ["touchstart"];
        var domArray = [document.body, _this.maskDom, _this.handlerDom, _this.contentDom];
        if (open && document.body.style.overflow !== "hidden") {
          if (right) {
            _this.addScrollingEffect(right);
          }
          document.body.style.touchAction = "none";
          domArray.forEach(function(item, i) {
            if (!item) {
              return;
            }
            addEventListener(item, eventArray[i] || "touchmove", i ? _this.removeMoveHandler : _this.removeStartHandler, _this.passive);
          });
        } else if (_this.getCurrentDrawerSome()) {
          document.body.style.touchAction = "";
          if (right) {
            _this.remScrollingEffect(right);
          }
          domArray.forEach(function(item, i) {
            if (!item) {
              return;
            }
            removeEventListener(item, eventArray[i] || "touchmove", i ? _this.removeMoveHandler : _this.removeStartHandler, _this.passive);
          });
        }
      }
    };
    _this.addScrollingEffect = function(right) {
      var _this$props5 = _this.props, placement = _this$props5.placement, duration = _this$props5.duration, ease = _this$props5.ease;
      var widthTransition = "width ".concat(duration, " ").concat(ease);
      var transformTransition = "transform ".concat(duration, " ").concat(ease);
      _this.dom.style.transition = "none";
      switch (placement) {
        case "right":
          _this.dom.style.transform = "translateX(-".concat(right, "px)");
          break;
        case "top":
        case "bottom":
          _this.dom.style.width = "calc(100% - ".concat(right, "px)");
          _this.dom.style.transform = "translateZ(0)";
          break;
        default:
          break;
      }
      clearTimeout(_this.timeout);
      _this.timeout = setTimeout(function() {
        if (_this.dom) {
          _this.dom.style.transition = "".concat(transformTransition, ",").concat(widthTransition);
          _this.dom.style.width = "";
          _this.dom.style.transform = "";
        }
      });
    };
    _this.remScrollingEffect = function(right) {
      var _this$props6 = _this.props, placement = _this$props6.placement, duration = _this$props6.duration, ease = _this$props6.ease;
      if (transitionStr) {
        document.body.style.overflowX = "hidden";
      }
      _this.dom.style.transition = "none";
      var heightTransition;
      var widthTransition = "width ".concat(duration, " ").concat(ease);
      var transformTransition = "transform ".concat(duration, " ").concat(ease);
      switch (placement) {
        case "left": {
          _this.dom.style.width = "100%";
          widthTransition = "width 0s ".concat(ease, " ").concat(duration);
          break;
        }
        case "right": {
          _this.dom.style.transform = "translateX(".concat(right, "px)");
          _this.dom.style.width = "100%";
          widthTransition = "width 0s ".concat(ease, " ").concat(duration);
          if (_this.maskDom) {
            _this.maskDom.style.left = "-".concat(right, "px");
            _this.maskDom.style.width = "calc(100% + ".concat(right, "px)");
          }
          break;
        }
        case "top":
        case "bottom": {
          _this.dom.style.width = "calc(100% + ".concat(right, "px)");
          _this.dom.style.height = "100%";
          _this.dom.style.transform = "translateZ(0)";
          heightTransition = "height 0s ".concat(ease, " ").concat(duration);
          break;
        }
        default:
          break;
      }
      clearTimeout(_this.timeout);
      _this.timeout = setTimeout(function() {
        if (_this.dom) {
          _this.dom.style.transition = "".concat(transformTransition, ",").concat(heightTransition ? "".concat(heightTransition, ",") : "").concat(widthTransition);
          _this.dom.style.transform = "";
          _this.dom.style.width = "";
          _this.dom.style.height = "";
        }
      });
    };
    _this.getCurrentDrawerSome = function() {
      return !Object.keys(currentDrawer).some(function(key) {
        return currentDrawer[key];
      });
    };
    _this.getLevelDom = function(_ref) {
      var level = _ref.level, getContainer = _ref.getContainer;
      if (windowIsUndefined) {
        return;
      }
      var container = getContainer && getContainer();
      var parent = container ? container.parentNode : null;
      _this.levelDom = [];
      if (level === "all") {
        var children = parent ? Array.prototype.slice.call(parent.children) : [];
        children.forEach(function(child) {
          if (child.nodeName !== "SCRIPT" && child.nodeName !== "STYLE" && child.nodeName !== "LINK" && child !== container) {
            _this.levelDom.push(child);
          }
        });
      } else if (level) {
        dataToArray(level).forEach(function(key) {
          document.querySelectorAll(key).forEach(function(item) {
            _this.levelDom.push(item);
          });
        });
      }
    };
    _this.getHorizontalBoolAndPlacementName = function() {
      var placement = _this.props.placement;
      var isHorizontal = placement === "left" || placement === "right";
      var placementName = "translate".concat(isHorizontal ? "X" : "Y");
      return {
        isHorizontal,
        placementName
      };
    };
    _this.state = {
      _self: _assertThisInitialized(_this)
    };
    return _this;
  }
  _createClass(DrawerChild2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;
      if (!windowIsUndefined) {
        var passiveSupported = false;
        try {
          window.addEventListener("test", null, Object.defineProperty({}, "passive", {
            get: function get() {
              passiveSupported = true;
              return null;
            }
          }));
        } catch (err) {
        }
        this.passive = passiveSupported ? {
          passive: false
        } : false;
      }
      var _this$props7 = this.props, open = _this$props7.open, getContainer = _this$props7.getContainer, showMask = _this$props7.showMask, autoFocus = _this$props7.autoFocus;
      var container = getContainer && getContainer();
      this.drawerId = "drawer_id_".concat(Number((Date.now() + Math.random()).toString().replace(".", Math.round(Math.random() * 9).toString())).toString(16));
      this.getLevelDom(this.props);
      if (open) {
        if (container && container.parentNode === document.body) {
          currentDrawer[this.drawerId] = open;
        }
        this.openLevelTransition();
        this.forceUpdate(function() {
          if (autoFocus) {
            _this2.domFocus();
          }
        });
        if (showMask) {
          var _this$props$scrollLoc;
          (_this$props$scrollLoc = this.props.scrollLocker) === null || _this$props$scrollLoc === void 0 ? void 0 : _this$props$scrollLoc.lock();
        }
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props8 = this.props, open = _this$props8.open, getContainer = _this$props8.getContainer, scrollLocker = _this$props8.scrollLocker, showMask = _this$props8.showMask, autoFocus = _this$props8.autoFocus;
      var container = getContainer && getContainer();
      if (open !== prevProps.open) {
        if (container && container.parentNode === document.body) {
          currentDrawer[this.drawerId] = !!open;
        }
        this.openLevelTransition();
        if (open) {
          if (autoFocus) {
            this.domFocus();
          }
          if (showMask) {
            scrollLocker === null || scrollLocker === void 0 ? void 0 : scrollLocker.lock();
          }
        } else {
          scrollLocker === null || scrollLocker === void 0 ? void 0 : scrollLocker.unLock();
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this$props9 = this.props, open = _this$props9.open, scrollLocker = _this$props9.scrollLocker;
      delete currentDrawer[this.drawerId];
      if (open) {
        this.setLevelTransform(false);
        document.body.style.touchAction = "";
      }
      scrollLocker === null || scrollLocker === void 0 ? void 0 : scrollLocker.unLock();
    }
  }, {
    key: "render",
    value: (
      // tslint:disable-next-line:member-ordering
      function render() {
        var _classnames, _this3 = this;
        var _this$props10 = this.props, className = _this$props10.className, children = _this$props10.children, style = _this$props10.style, width = _this$props10.width, height = _this$props10.height, defaultOpen = _this$props10.defaultOpen, $open = _this$props10.open, prefixCls = _this$props10.prefixCls, placement = _this$props10.placement, level = _this$props10.level, levelMove = _this$props10.levelMove, ease = _this$props10.ease, duration = _this$props10.duration, getContainer = _this$props10.getContainer, handler = _this$props10.handler, onChange2 = _this$props10.onChange, afterVisibleChange2 = _this$props10.afterVisibleChange, showMask = _this$props10.showMask, maskClosable = _this$props10.maskClosable, maskStyle = _this$props10.maskStyle, onClose = _this$props10.onClose, onHandleClick = _this$props10.onHandleClick, keyboard = _this$props10.keyboard, getOpenCount = _this$props10.getOpenCount, scrollLocker = _this$props10.scrollLocker, contentWrapperStyle = _this$props10.contentWrapperStyle, props = _objectWithoutProperties(_this$props10, _excluded);
        var open = this.dom ? $open : false;
        var wrapperClassName = (0, import_classnames.default)(prefixCls, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "-").concat(placement), true), _defineProperty(_classnames, "".concat(prefixCls, "-open"), open), _defineProperty(_classnames, className || "", !!className), _defineProperty(_classnames, "no-mask", !showMask), _classnames));
        var _this$getHorizontalBo2 = this.getHorizontalBoolAndPlacementName(), placementName = _this$getHorizontalBo2.placementName;
        var placementPos = placement === "left" || placement === "top" ? "-100%" : "100%";
        var transform = open ? "" : "".concat(placementName, "(").concat(placementPos, ")");
        var handlerChildren = handler && React2.cloneElement(handler, {
          onClick: function onClick(e) {
            if (handler.props.onClick) {
              handler.props.onClick();
            }
            if (onHandleClick) {
              onHandleClick(e);
            }
          },
          ref: function ref(c) {
            _this3.handlerDom = c;
          }
        });
        return React2.createElement("div", _extends({}, omit(props, ["switchScrollingEffect", "autoFocus"]), {
          tabIndex: -1,
          className: wrapperClassName,
          style,
          ref: function ref(c) {
            _this3.dom = c;
          },
          onKeyDown: open && keyboard ? this.onKeyDown : void 0,
          onTransitionEnd: this.onWrapperTransitionEnd
        }), showMask && React2.createElement("div", {
          className: "".concat(prefixCls, "-mask"),
          onClick: maskClosable ? onClose : void 0,
          style: maskStyle,
          ref: function ref(c) {
            _this3.maskDom = c;
          }
        }), React2.createElement("div", {
          className: "".concat(prefixCls, "-content-wrapper"),
          style: _objectSpread2({
            transform,
            msTransform: transform,
            width: isNumeric(width) ? "".concat(width, "px") : width,
            height: isNumeric(height) ? "".concat(height, "px") : height
          }, contentWrapperStyle),
          ref: function ref(c) {
            _this3.contentWrapper = c;
          }
        }, React2.createElement("div", {
          className: "".concat(prefixCls, "-content"),
          ref: function ref(c) {
            _this3.contentDom = c;
          }
        }, children), handlerChildren));
      }
    )
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, _ref2) {
      var prevProps = _ref2.prevProps, _self = _ref2._self;
      var nextState = {
        prevProps: props
      };
      if (prevProps !== void 0) {
        var placement = props.placement, level = props.level;
        if (placement !== prevProps.placement) {
          _self.contentDom = null;
        }
        if (level !== prevProps.level) {
          _self.getLevelDom(props);
        }
      }
      return nextState;
    }
  }]);
  return DrawerChild2;
}(React2.Component);
var DrawerChild_default = DrawerChild;

// ../../node_modules/rc-drawer/es/DrawerWrapper.js
var _excluded2 = ["defaultOpen", "getContainer", "wrapperClassName", "forceRender", "handler"];
var _excluded22 = ["visible", "afterClose"];
var DrawerWrapper = function(_React$Component) {
  _inherits(DrawerWrapper2, _React$Component);
  var _super = _createSuper(DrawerWrapper2);
  function DrawerWrapper2(props) {
    var _this;
    _classCallCheck(this, DrawerWrapper2);
    _this = _super.call(this, props);
    _this.dom = void 0;
    _this.onHandleClick = function(e) {
      var _this$props = _this.props, onHandleClick = _this$props.onHandleClick, $open = _this$props.open;
      if (onHandleClick) {
        onHandleClick(e);
      }
      if (typeof $open === "undefined") {
        var open = _this.state.open;
        _this.setState({
          open: !open
        });
      }
    };
    _this.onClose = function(e) {
      var _this$props2 = _this.props, onClose = _this$props2.onClose, open = _this$props2.open;
      if (onClose) {
        onClose(e);
      }
      if (typeof open === "undefined") {
        _this.setState({
          open: false
        });
      }
    };
    var _open = typeof props.open !== "undefined" ? props.open : !!props.defaultOpen;
    _this.state = {
      open: _open
    };
    if ("onMaskClick" in props) {
      console.warn("`onMaskClick` are removed, please use `onClose` instead.");
    }
    return _this;
  }
  _createClass(DrawerWrapper2, [{
    key: "render",
    value: (
      // tslint:disable-next-line:member-ordering
      function render() {
        var _this2 = this;
        var _this$props3 = this.props, defaultOpen = _this$props3.defaultOpen, getContainer = _this$props3.getContainer, wrapperClassName = _this$props3.wrapperClassName, forceRender = _this$props3.forceRender, handler = _this$props3.handler, props = _objectWithoutProperties(_this$props3, _excluded2);
        var open = this.state.open;
        if (!getContainer) {
          return React3.createElement("div", {
            className: wrapperClassName,
            ref: function ref(c) {
              _this2.dom = c;
            }
          }, React3.createElement(DrawerChild_default, _extends({}, props, {
            open,
            handler,
            getContainer: function getContainer2() {
              return _this2.dom;
            },
            onClose: this.onClose,
            onHandleClick: this.onHandleClick
          })));
        }
        var $forceRender = !!handler || forceRender;
        return React3.createElement(PortalWrapper_default, {
          visible: open,
          forceRender: $forceRender,
          getContainer,
          wrapperClassName
        }, function(_ref) {
          var visible = _ref.visible, afterClose = _ref.afterClose, rest = _objectWithoutProperties(_ref, _excluded22);
          return (
            // react 15，componentWillUnmount 时 Portal 返回 afterClose, visible.
            React3.createElement(DrawerChild_default, _extends({}, props, rest, {
              open: visible !== void 0 ? visible : open,
              afterVisibleChange: afterClose !== void 0 ? afterClose : props.afterVisibleChange,
              handler,
              onClose: _this2.onClose,
              onHandleClick: _this2.onHandleClick
            }))
          );
        });
      }
    )
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, _ref2) {
      var prevProps = _ref2.prevProps;
      var newState = {
        prevProps: props
      };
      if (typeof prevProps !== "undefined" && props.open !== prevProps.open) {
        newState.open = props.open;
      }
      return newState;
    }
  }]);
  return DrawerWrapper2;
}(React3.Component);
DrawerWrapper.defaultProps = {
  prefixCls: "drawer",
  placement: "left",
  getContainer: "body",
  defaultOpen: false,
  level: "all",
  duration: ".3s",
  ease: "cubic-bezier(0.78, 0.14, 0.15, 0.86)",
  onChange: function onChange() {
  },
  afterVisibleChange: function afterVisibleChange() {
  },
  handler: React3.createElement("div", {
    className: "drawer-handle"
  }, React3.createElement("i", {
    className: "drawer-handle-icon"
  })),
  showMask: true,
  maskClosable: true,
  maskStyle: {},
  wrapperClassName: "",
  className: "",
  keyboard: true,
  forceRender: false,
  autoFocus: true
};
var DrawerWrapper_default = DrawerWrapper;

// ../../node_modules/rc-drawer/es/index.js
var es_default = DrawerWrapper_default;
export {
  es_default as default
};
//# sourceMappingURL=rc-drawer.js.map
